# assign(paste('cc',i,sep=''),kmeans(pc.cr$scores[, 1:5],k0,iter.max=1000))
# ratio_kmeans[i]=get(paste('cc',i,sep=''))$tot.withinss/get(paste('cc',i,sep=''))$totss}
# index=which.min(ratio_kmeans)
# cc=get(paste('cc',index,sep=''))
load('~/Documents/Meetings_2014/20140121/cc.Rdata')
myclkm=cc$cluster
pca.dim1 <- pc.cr$scores[,1]
pca.dim2 <- pc.cr$scores[,2]
# plot(pca.dim1,pca.dim2,col=myclkm+1,main='PCA plots for k-means')
cln6=list()
cm6=matrix(NA,k0,dim(casemeasures)[2])
for (i in 1:k0){
cln6[[i]]=which(myclkm==i)
if (!is.array(casemeasures[cln6[[i]],])){
cm6[i,]=(casemeasures[cln6[[i]],])
}else{
cm6[i,]=colMeans(casemeasures[cln6[[i]],])}}
colnames(cm6)=colnames(casemeasures)
floss_6sT_ab=foreach (i = 1:dim(floss_6sT_mat)[1],.combine=rbind)%dopar%{
if (is.null(floss_6sT_sh[[i]]$end)){
floss_6sT_a_sup=1
floss_6sT_b_sup=5400
}else{
floss_6sT_a_sup0=c(1,floss_6sT_sh[[i]]$end+w-1-w/4+1)
floss_6sT_b_sup0=c(floss_6sT_sh[[i]]$start+w/4-1,5400)
if (length(which(floss_6sT_b_sup0-floss_6sT_a_sup0+1<=1))==0){
floss_6sT_a_sup=floss_6sT_a_sup0
floss_6sT_b_sup=floss_6sT_b_sup0
}else{
floss_6sT_a_sup=floss_6sT_a_sup0[-which(floss_6sT_b_sup0-floss_6sT_a_sup0+1<=1)]
floss_6sT_b_sup=floss_6sT_b_sup0[-which(floss_6sT_b_sup0-floss_6sT_a_sup0+1<=1)]}}
cbind(floss_6sT_a_sup+(i-1)*5400,floss_6sT_b_sup+(i-1)*5400)
}
deltas_Ri=foreach (j=1:dim(floss_6sT_ab)[1],.combine=c)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$Ri
Ri_e=(Ri_e<0.25)*1+((Ri_e>0.25)&(Ri_e<1))*2+(Ri_e>1)*4
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$Ri}),na.rm=TRUE)
Ri_ne=(Ri_ne<0.25)*1+((Ri_ne>0.25)&(Ri_ne<1))*2+(Ri_ne>1)*4
Ri_e-Ri_ne  }}
Ri_floss
fix(Ri_floss)
fix(Ri_floss)
deltas=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){rep(NA,4)}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$Ri
Nsquare_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$N
Ssquare_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$S
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$Ri}),na.rm=TRUE)
Nsquare_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$N}),na.rm=TRUE)
Ssquare_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$S}),na.rm=TRUE)
c(Ri_e-Ri_ne,Nsquare_e-Nsquare_ne,Ssquare_e-Ssquare_ne,mean(fluxww2[floss_6sT_a[id]:floss_6sT_b[id]],na.rm=TRUE)-mean(fluxww2[floss_6sT_ab[j,1]:floss_6sT_ab[j,2]],na.rm=TRUE))
}}
par(mfrow=c(2,2))
hist(deltas[,1],xlab=expression(Delta~Ri),breaks=40,main='')
hist(deltas[,2],xlab=expression(Delta~N^2),breaks=40,main='')
hist(deltas[,3],xlab=expression(Delta~S^2),breaks=40,main='')
hist(deltas[,4],xlab=expression(Delta~ww),breaks=40,main='')
cls=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
which(floss_6sT_a==floss_6sT_ab[j,2]+1)}
cls
cls=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else
id
}
cls
dim(deltas)
cls=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else
myclkm(id)
}
cls=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else
myclkm[id]
}
cls
for (i=1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main='')
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='')
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='')
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main='')}
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main='')
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='')
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='')
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main='')}
which(cls==i)
j=5
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
id
myclkm[5]
i
j=922
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
id
myclkm[891]
floss_6sT_b[id]
floss_6sT_ab[j,2]+1
floss_6sT_a[id]
j
id
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main='',col=i)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='',col=i)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='',col=i)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main='',col=i)}
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main='',col=i+1)}
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=20,main='',col=i+1)}
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main='',col=i+1)}
deltas=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){rep(NA,4)}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$Ri
Nsquare_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$N
Ssquare_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$S
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$Ri}),na.rm=TRUE)
Nsquare_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$N}),na.rm=TRUE)
Ssquare_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$S}),na.rm=TRUE)
c(Ri_e-Ri_ne,Nsquare_e-Nsquare_ne,Ssquare_e-Ssquare_ne,mean(fluxww2[floss_6sT_a[id]:floss_6sT_b[id]],na.rm=TRUE)-mean(fluxww2[floss_6sT_ab[j,1]:floss_6sT_ab[j,2]],na.rm=TRUE))
}}
par(mfrow=c(2,2))
hist(deltas[,1],xlab=expression(Delta~Ri),breaks=40,main='')
hist(deltas[,2],xlab=expression(Delta~N^2),breaks=40,main='')
hist(deltas[,3],xlab=expression(Delta~S^2),breaks=40,main='')
hist(deltas[,4],xlab=expression(Delta~ww),breaks=40,main='')
deltas_Ri=foreach (j=1:dim(floss_6sT_ab)[1],.combine=c)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])
Ri_e=(Ri_e<0.25)*1+((Ri_e>0.25)&(Ri_e<1))*2+(Ri_e>1)*4
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])}),na.rm=TRUE)
Ri_ne=(Ri_ne<0.25)*1+((Ri_ne>0.25)&(Ri_ne<1))*2+(Ri_ne>1)*4
Ri_e-Ri_ne  }}
deltas_Ri=na.exclude(deltas_Ri)
par(mfrow=c(1,1))
hist(deltas_Ri,xlab=expression(Delta~Ri),breaks=20,main='')
deltas_Ri=foreach (j=1:dim(floss_6sT_ab)[1],.combine=c)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])
Ri_e=(Ri_e<0.25)*1+((Ri_e>0.25)&(Ri_e<1))*2+(Ri_e>1)*4
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])}),na.rm=TRUE)
Ri_ne=(Ri_ne<0.25)*1+((Ri_ne>0.25)&(Ri_ne<1))*2+(Ri_ne>1)*4
Ri_e-Ri_ne  }}
deltas_Ri=na.exclude(deltas_Ri)
par(mfrow=c(1,1))
hist(deltas_Ri,xlab=expression(Delta~Ri),breaks=20,main='')
deltas_Ri
deltas_Ri=foreach (j=1:dim(floss_6sT_ab)[1],.combine=c)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$Ri
Ri_e=(Ri_e<0.25)*1+((Ri_e>0.25)&(Ri_e<1))*2+(Ri_e>1)*4
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])})$Ri,na.rm=TRUE)
Ri_ne=(Ri_ne<0.25)*1+((Ri_ne>0.25)&(Ri_ne<1))*2+(Ri_ne>1)*4
Ri_e-Ri_ne  }}
deltas_Ri=na.exclude(deltas_Ri)
par(mfrow=c(1,1))
hist(deltas_Ri,xlab=expression(Delta~Ri),breaks=20,main='')
sum(deltas_Ri==0)
deltas_Ri=foreach (j=1:dim(floss_6sT_ab)[1],.combine=c)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){NA}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$Ri
Ri_e=(Ri_e<0.25)*1+((Ri_e>0.25)&(Ri_e<1))*2+(Ri_e>1)*4
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$Ri}),na.rm=TRUE)
Ri_ne=(Ri_ne<0.25)*1+((Ri_ne>0.25)&(Ri_ne<1))*2+(Ri_ne>1)*4
Ri_e-Ri_ne  }}
deltas_Ri=na.exclude(deltas_Ri)
par(mfrow=c(1,1))
hist(deltas_Ri,xlab=expression(Delta~Ri),breaks=20,main='')
sum(deltas_Ri==0)
sum(deltas_Ri==1)
sum(deltas_Ri==2)
sum(deltas_Ri==3)
sum(deltas_Ri==-1)
sum(deltas_Ri==-2)
sum(deltas_Ri==-3)
cls[1]
cls[1:10]
setwd('~/Documents/Conferences&Presentations/Presubmission/')
slidify('presubmission.Rmd')
slidify('presubmission.Rmd')
slidify('presubmission.Rmd')
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
setwd('~/Desktop/EventDetection/R/')
file.sources = list.files(pattern="*.R")
sapply(file.sources,source)
set.seed(12345)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
whitenoise=ts2mat(rnorm(128*20),128)
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
tests=noiseTests(x,w,'white')
par(mfrow=c(1,1))
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
set.seed(12345)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
whitenoise=ts2mat(rnorm(128*20),128)
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
tests=noiseTests(x,w,'white')
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',median(deltas[which(cls==i),1],' Mean=',mean(deltas[which(cls==i),1]))),col=i+1)
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',median(deltas[which(cls==i),1],' Mean=',mean(deltas[which(cls==i),1]))),col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main='',col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main='',col=i+1)}
paste('Median=',median(deltas[which(cls==i),1],
' Mean=',mean(deltas[which(cls==i),1])))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',median(deltas[which(cls==i),1]),
' Mean=',mean(deltas[which(cls==i),1])),col=i+1)
i
median(deltas[which(cls==i),1]
)
deltas[which(cls==i),1]
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1])),2),col=i+1)
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2),col=i+1)
)
round(mean(deltas[which(cls==i),1]),2)
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)}
deltas=foreach (j=1:dim(floss_6sT_ab)[1],.combine=rbind)%dopar%{
id=which(floss_6sT_a==floss_6sT_ab[j,2]+1)
if(length(id)==0){rep(NA,4)}else{
Ri_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$Ri
Nsquare_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$N
Ssquare_e=Ri_floss(floss_6sT_a[id],floss_6sT_b[id])$S
n=floor((floss_6sT_ab[j,2]-floss_6sT_ab[j,1]+1)/120)
if (n==0){b=floss_6sT_ab[j,2]}else{b=floss_6sT_ab[j,1]+c(1:n)*120-1}
n_ne=length(b)
b[n_ne]=floss_6sT_ab[j,2]
if(n==0){a=floss_6sT_ab[j,1]}else{a=floss_6sT_ab[j,1]+c(0:(n-1))*120}
Ri_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$Ri}),na.rm=TRUE)
Nsquare_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$N}),na.rm=TRUE)
Ssquare_ne=mean(sapply(1:length(a),function(i){Ri_floss(a[i],b[i])$S}),na.rm=TRUE)
c(Ri_e-Ri_ne,Nsquare_e-Nsquare_ne,Ssquare_e-Ssquare_ne,mean(fluxww2[floss_6sT_a[id]:floss_6sT_b[id]],na.rm=TRUE)-mean(fluxww2[floss_6sT_ab[j,1]:floss_6sT_ab[j,2]],na.rm=TRUE))
}}
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)}
cls
round(median(deltas[which(cls==i),1]),2)
round(mean(deltas[which(cls==i),1]),2)
mean(deltas[which(cls==i),1])
i=2
mean(deltas[which(cls==i),1])
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),2)),col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),2]),2),
' Mean=',round(mean(deltas[which(cls==i),2]),2)),col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),3]),2),
' Mean=',round(mean(deltas[which(cls==i),3]),2)),col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),4]),2),
' Mean=',round(mean(deltas[which(cls==i),4]),2)),col=i+1)}
mean(deltas[which(cls==i),1])
mean(deltas[which(cls==i),2])
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),2),
' Mean=',round(mean(deltas[which(cls==i),1]),5)),col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),2]),2),
' Mean=',round(mean(deltas[which(cls==i),2]),5)),col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),3]),2),
' Mean=',round(mean(deltas[which(cls==i),3]),5)),col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),4]),2),
' Mean=',round(mean(deltas[which(cls==i),4]),5)),col=i+1)}
for (i in 1:3){
par(mfrow=c(2,2))
hist(deltas[which(cls==i),1],xlab=expression(Delta~Ri),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),1]),5),
' Mean=',round(mean(deltas[which(cls==i),1]),5)),col=i+1)
hist(deltas[which(cls==i),2],xlab=expression(Delta~N^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),2]),5),
' Mean=',round(mean(deltas[which(cls==i),2]),5)),col=i+1)
hist(deltas[which(cls==i),3],xlab=expression(Delta~S^2),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),3]),5),
' Mean=',round(mean(deltas[which(cls==i),3]),5)),col=i+1)
hist(deltas[which(cls==i),4],xlab=expression(Delta~ww),breaks=40,main=paste('Median=',round(median(deltas[which(cls==i),4]),5),
' Mean=',round(mean(deltas[which(cls==i),4]),5)),col=i+1)}
for (i in 1:3){
for (j in 1:4)
cat(median(deltas[which(cls==i),j]),mean(deltas[which(cls==i),j]))
}
colMedians
values=c()
for (i in 1:3){
rbind(values,(colMedian(deltas[which(cls==i),]),colMeans(deltas[which(cls==i),])))
}
values=c()
for (i in 1:3){
rbind(values,c(colMedian(deltas[which(cls==i),]),colMeans(deltas[which(cls==i),])))
}
values=c()
for (i in 1:3){
rbind(values,c(colMedians(deltas[which(cls==i),]),colMeans(deltas[which(cls==i),])))
}
values=c()
for (i in 1:3){
values=rbind(values,c(colMedians(deltas[which(cls==i),]),colMeans(deltas[which(cls==i),])))
}
values
c(colMedians(deltas[which(cls==i),]),colMeans(deltas[which(cls==i),]))
medians=c()
for (i in 1:3){
medians=rbind(values,c(colMedians(deltas[which(cls==i),])))
}
means=c()
for (i in 1:3){
means=rbind(values,c(colMeans(deltas[which(cls==i),])))
}
means
medians=c()
for (i in 1:3){
medians=rbind(medians,c(colMedians(deltas[which(cls==i),])))
}
means=c()
for (i in 1:3){
means=rbind(means,c(colMeans(deltas[which(cls==i),])))
}
means
medians
colnames(means)=c('dRi','dN2','dS2','dww')
colnames(medians)=c('dRi','dN2','dS2','dww')
rownames(medians)=c('cl1','cl2','cl3')
rownames(means)=c('cl1','cl2','cl3')
menas
means
medians
library(foreach)
# Gives us the progress bar object.
library(utils)
# Some number of iterations to process.
n <- 10000
# Create the progress bar.
pb <- txtProgressBar(min = 1, max = n, style=3)
# The foreach loop we are monitoring. This foreach loop will log2 all
# the values from 1 to n and then sum the result.
k <- foreach(i = icount(n), .final=sum, .combine=c) %do% {
setTxtProgressBar(pb, i)
log2(i)
}
# Close the progress bar.
close(pb)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
tests=noiseTests(x,w,'white')
w=128
pbar <- txtProgressBar(min = 0, max = N, style = 3)
lx = length(x)
N = length(x) - w + 1
l = round(log(w))
testsPvalues = foreach(i = 1:N, .combine = c) %dopar% {
setTxtProgressBar(pbar, i)
xx = x[i:(i + w - 1)]
Box.test(xx, type = "Ljung-Box", lag = l)$p.value
}
pbar <- txtProgressBar(min = 0, max = N, style = 3)
testsPvalues = foreach(i = 1:N, .combine = c) %dopar% {
setTxtProgressBar(pbar, i)
xx = x[i:(i + w - 1)]
Box.test(xx, type = "Ljung-Box", lag = l)$p.value
}
pbar <- txtProgressBar(min = 0, max = N, style = 3)
testsPvalues = foreach(i = 1:N, .combine = c) %dopar% {
setTxtProgressBar(pbar, i)
xx = x[i:(i + w - 1)]
Box.test(xx, type = "Ljung-Box", lag = l)$p.value
}
pbar <- txtProgressBar(min = 0, max = N, style = 3)
testsPvalues = foreach(i = 1:N, .combine = c) %do% {
setTxtProgressBar(pbar, i)
xx = x[i:(i + w - 1)]
Box.test(xx, type = "Ljung-Box", lag = l)$p.value
}
system.time(pbar <- txtProgressBar(min = 0, max = N, style = 3)
testsPvalues = foreach(i = 1:N, .combine = c) %do% {
setTxtProgressBar(pbar, i)
xx = x[i:(i + w - 1)]
Box.test(xx, type = "Ljung-Box", lag = l)$p.value
})
ptm <- proc.time()
pbar <- txtProgressBar(min = 0, max = N, style = 3)
testsPvalues = foreach(i = 1:N, .combine = c) %do% {
setTxtProgressBar(pbar, i)
xx = x[i:(i + w - 1)]
Box.test(xx, type = "Ljung-Box", lag = l)$p.value
}
proc.time() - ptm
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
ptm <- proc.time()
tests=noiseTests(x,w,'white')
proc.time() - ptm
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
tests=noiseTests(x,w,'white',parallel=FALSE)
tests=noiseTests(x,w,'white',parallel=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
w=128
# register a parallel backend
library(doMC);library(foreach)
registerDoMC(cores=8)
tests=noiseTests(x,w,'white',parallel=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
tests=noiseTests(x,w,'white',parallel=TRUE)
tests=noiseTests(x,w,'white',parallel=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
library(tcltk)
library(tcltk2)
library(tcltk)
pb <- tkProgressBar("test progress bar", "Some information in %",
0, 100, 50)
Sys.sleep(0.5)
u <- c(0, sort(runif(20, 0, 100)), 100)
for(i in u) {
Sys.sleep(0.1)
info <- sprintf("%d%% done", round(i))
setTkProgressBar(pb, i, sprintf("test (%s)", info), info)
}
Sys.sleep(5)
close(pb)
