i=1
lines(c(a[i]:b[i]), x[a[i]:b[i]], col = 2)
x=events$x
a=events$start
b=events$end
a
lines(c(a[i]:b[i]), x[a[i]:b[i]], col = 2)
i=2
lines(c(a[i]:b[i]), x[a[i]:b[i]], col = 2)
a[2]
b[2]
plot(x[a[i]:b[i]],ty='l')
set.seed(12345)
coeff=0.5;s=1
x=c(arima.sim(list(order = c(1,0,0),ar=coeff),n=500,sd=s),
cbfs_red("rc"),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red("cr"),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red("box"),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red("sine"),arima.sim(list(order = c(1,0,0),ar=coeff),n=1000,sd=s),
arima.sim(list(order = c(1,0,0),ar=0.8),n=1100,sd=4))
w=128; alpha=0.05
events=eventDetection(x,w,'red',parallel=TRUE,alpha,'art')
plot.events(events)
events$a
events$start
events$end
w
noiseType='red'
tests = noiseTests(x, w, noiseType = noiseType, parallel=TRUE)
events = eventExtraction(tests, w, alpha)
events$start
events$end
plot(x,ty='l')
plot(x[497:720])
plot(x[1045:1272],ty='l')
plot(x[1684:2094],ty='l')
plot(tests,ty='l')
str(tests)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
plot(tests,ty='l')
plot(as.numeric(tests),ty='l')
xx=x[500:627]
ur.za.fast(xx)
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
ur.za.fast(xx, "both")$flag
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
events = eventExtraction(tests, w, alpha)
events
tests = noiseTests(x, w, noiseType = noiseType, parallel=parallel)
tests=noiseTests(x,w,'red',parallel=TRUE)
plot(as.numeric(tests),ty='l')
ur.za.fast(xx, "both")$flag
testsPvalues = foreach(i = 1:N, .combine = c) %dopar% {
xx = x[i:(i + w - 1)]
if (sum(is.na(xx)) > w/4) {
NA
} else {
xx = na.approx(xx)
if (PP.test(xx)$p.value > 0.05) {
ur.za.fast(xx, "both")
} else {
xx = detrendc(xx)
model = ar(xx, order.max = 1, method = "ols")
Box.test(model$resid, lag = l, type = "Ljung-Box", fitdf = 1)$p.value
}
}
}
N=length(x-w+1)
lag=round(log(w))
testsPvalues = foreach(i = 1:N, .combine = c) %dopar% {
xx = x[i:(i + w - 1)]
if (sum(is.na(xx)) > w/4) {
NA
} else {
xx = na.approx(xx)
if (PP.test(xx)$p.value > 0.05) {
ur.za.fast(xx, "both")
} else {
xx = detrendc(xx)
model = ar(xx, order.max = 1, method = "ols")
Box.test(model$resid, lag = l, type = "Ljung-Box", fitdf = 1)$p.value
}
}
}
l=round(log(w))
testsPvalues = foreach(i = 1:N, .combine = c) %dopar% {
xx = x[i:(i + w - 1)]
if (sum(is.na(xx)) > w/4) {
NA
} else {
xx = na.approx(xx)
if (PP.test(xx)$p.value > 0.05) {
ur.za.fast(xx, "both")
} else {
xx = detrendc(xx)
model = ar(xx, order.max = 1, method = "ols")
Box.test(model$resid, lag = l, type = "Ljung-Box", fitdf = 1)$p.value
}
}
}
plot(testsPvalues,ty='l')
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
events=eventDetection(x,w,'red',parallel=TRUE,alpha,'art')
plot.events(events)
set.seed(123)
coeff=0.5;s=1
x=c(arima.sim(list(order = c(1,0,0),ar=coeff),n=500,sd=s),
cbfs_red("rc"),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red("cr"),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red("box"),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red("sine"),arima.sim(list(order = c(1,0,0),ar=coeff),n=1000,sd=s),
arima.sim(list(order = c(1,0,0),ar=0.8),n=1100,sd=4))
w=128; alpha=0.05
events=eventDetection(x,w,'red',parallel=TRUE,alpha,'art')
plot.events(events)
source('~/Desktop/EventDetection/R/EventDetection.R', echo=TRUE)
noiseTests
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
pbar <- txtProgressBar(min = 0, max = length(x) - w, style = 3)
setTxtProgressBar(pbar, i)
i
pbar <- txtProgressBar(min = 0, max = length(x) - w, style = 10)
setTxtProgressBar(pbar, i)
pbar <- txtProgressBar(min = 0, max = length(x) - w, style = 2)
setTxtProgressBar(pbar, i)
pbar <- txtProgressBar(min = 0, max = length(x) - w, style = 3)
setTxtProgressBar(pbar, i)
setTxtProgressBar(pbar, 100)
pbar <- txtProgressBar(min = 0, max = length(x) - w, style = 4)
setTxtProgressBar(pbar, 100)
pbar <- txtProgressBar(min = 0, max = length(x) - w, style = 5)
setTxtProgressBar(pbar, 100)
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
pb <- winProgressBar(title="Example progress bar", label="0% done", min=0, max=100, initial=0)
install.packages('tcltk ')
install.packages('tcltk')
install.packages('tcltk2')
library(tcltk2)
pb <- winProgressBar(title="Example progress bar", label="0% done", min=0, max=100, initial=0)
?tk2progress
tt2 <- tktoplevel()
pw <- tk2panedwindow(tt2, orient = "vertical")
lpw.1 <- tk2text(pw)
lpw.2 <- tk2text(pw)
tkadd(pw, lpw.1)#, minsize = 100)
tkadd(pw, lpw.2)#, minsize = 70)
but <- tk2button(tt2, text = "OK", width = 10,
command = function() tkdestroy(tt2))
tkpack(pw, fill = "both", expand = "yes")
tkpack(but)
?tkProgressBar
pb <- tkProgressBar("test progress bar", "Some information in %",
0, 100, 50)
Sys.sleep(0.5)
u <- c(0, sort(runif(20, 0, 100)), 100)
for(i in u) {
Sys.sleep(0.1)
info <- sprintf("%d%% done", round(i))
setTkProgressBar(pb, i, sprintf("test (%s)", info), info)
}
Sys.sleep(5)
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
getwd()
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(123)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
whitenoise=ts2mat(rnorm(128*20),128)
x=c(rnorm(128),t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
alpha=0.05
events=eventDetection(x,w,'white',parallel=TRUE,alpha,'art')
cc=eventCluster(events,4)
myclkm=cc$cl
myclkm
x=cbfs_red('box')
ur.za.fast(x,'both')
x=cbfs_red('cr')
ur.za.fast(x,'both')
source('~/Desktop/EventDetection/R/plot.events.R', echo=TRUE)
library(EventDetection)
source('~/Desktop/EventDetection/R/plot.events.R', echo=TRUE)
library(EventDetection)
library(EventDetection)
source('~/Desktop/EventDetection/R/eventCluster.R', echo=TRUE)
source('~/Desktop/EventDetection/R/EventDetection.R', echo=TRUE)
source('~/Desktop/EventDetection/R/plot.events.R', echo=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
source('~/Desktop/EventDetection/R/eventCluster.R', echo=TRUE)
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
source('~/Desktop/EventDetection/R/eventExtraction.R', echo=TRUE)
source('~/Desktop/EventDetection/R/measures.R', echo=TRUE)
source('~/Desktop/EventDetection/R/cbfs_red.R', echo=TRUE)
library(EventDetection)
library(EventDetection)
cbfs_red(type = c("box", "rl", "lr", "sine"), A = 10, s = 1,         coeff = 0.5)
x = cbfs_red(type = 'box', coeff=0.5, s=1, A=10)
plot(x,type='l',xlab='t',ylab='x')
source('~/Desktop/EventDetection/R/cbfs_red.R', echo=TRUE)
x1 = cbfs(type = `box', sigma = 1)
library(EventDetection)
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white',outdir=getwd())
saveGIF(for (i in 1:(length(x) - w)) {
info <- sprintf("%d%% done", round(i/(length(x)-w)*100))
setTkProgressBar(pbar, round(i/(length(x)-w)*100), sprintf("test (%s)", info), info)
}
}
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
#' set.seed(12345)
#' x=c(rnorm(128),cbfs(type='box')))
#' aniplot.events(x,w=128,noiseType='white',outdir=getwd())
#' set.seed(12345)
x=c(rnorm(128),cbfs(type='box')))
aniplot.events(x,w=128,noiseType='white',outdir=getwd())
source('~/Desktop/EventDetection/R/EventDetection.R', echo=TRUE)
source('~/Desktop/EventDetection/R/eventCluster.R', echo=TRUE)
library(EventDetection)
set.seed(123)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
whitenoise=ts2mat(rnorm(128*20),128)
x=c(rnorm(128),t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
alpha=0.05
events=EventDetection(x,w,'white',TRUE,alpha,'art')
cc=eventCluster(events,4)
myclkm=cc$cl
plot.events(events,cluster=TRUE, myclkm)
library(knitcitations)
setwd('~/Documents/Conferences&Presentations/Presubmission/presubmission/')
slidify('presubmission.Rmd')
bib <- read.bib("copy.bib")
slidify('presubmission.Rmd')
load('~/Documents/Conferences&Presentations/JAS/JAS0910/JAS0910.Rdata')
CASES99=temp7
source('~/Desktop/TED/R/eventCluster.R')
getwd()
setwd('~/Desktop/TED/')
save(CASES99,file='data/CASES99.rda')
save(CASES99,file='data/CASES99.rda')
load(CASES99)
library(bfast)
?bfast
source('~/Desktop/TED/R/EventDetection.R')
x=cbfs_red("box")
ur.za.fast(x,"both")
x=cbfs_red("cr")
ur.za.fast(x,"both")
source('~/Desktop/TED/R/ur.za.fast.R')
x=cbfs_red("box")
ur.za.fast(x,"both")
x=cbfs_red("cr")
ur.za.fast(x,"both")
types=c(``box",``rc",'cr','sine')
plot(x,ty="l")
library(TED)
cbfs(type="box")
plot(x,type="l",xlab="t",ylab="x")
set.seed(123)n=128types=c("box","rc","cr","sine")shapes=matrix(NA,20,n)for (i in 1:20){    shapes[i,]=cbfs(type=types[sample(1:4,1)])}whitenoise=ts2mat(rnorm(128*20),128)# generate x which randomly combine the four types of events with each two of them seperated by noisex=c(rnorm(128),t(cbind(shapes,whitenoise)))plot(x,ty="l")
set.seed(123)
n=128types=c("box","rc","cr","sine")shapes=matrix(NA,20,n)
n=128types=c("box","rc","cr","sine")shapes=matrix(NA,20,n)
n=128types=c("box","rc","cr","sine")shapes=matrix(NA,20,n)
n=128
n=128
n=128
library(TED)
roxygenise('R')
roxygenise('')
library(TED)
setwd('~/Documents/Meetings_2012/Rfunctions')
file.sources = list.files(pattern="*.R")
sapply(file.sources,source)
floss_6s=readMat('~/Documents/TurbulenceData//FLOSS/floss_6s/Danijel.mat')
Flux=readMat('~/Documents/TurbulenceData//Flux/wT_tilt.mat')
Fluxww=readMat('~/Documents/TurbulenceData//Flux/ww_tilt.mat')
Fluxwu=readMat('~/Documents/TurbulenceData//Flux/wu_tilt.mat')
Fluxwv=readMat('~/Documents/TurbulenceData//Flux/wv_tilt.mat')
# U=readMat('~/Documents/TurbulenceData//Flux/u_tilt.mat')
# V=readMat('~/Documents/TurbulenceData//Flux/v_tilt.mat')
fluxTT=readMat('~/Documents/TurbulenceData//Flux/TT.mat')
W=readMat('~/Documents/TurbulenceData//Flux/w_tilt.mat')
for (levels in 1:7){
assign(paste('T',levels,sep=''),floss_6s$T[,levels]+273)
assign(paste('u',levels,sep=''),floss_6s$U[,levels])
assign(paste('v',levels,sep=''),floss_6s$V[,levels])
assign(paste('w',levels,sep=''),W$w.tilt[,levels])
assign(paste('TT',levels,sep=''),fluxTT$TT[,levels])
assign(paste('W',levels,sep=''),sqrt(floss_6s$U[,levels]^2+floss_6s$V[,levels]^2))
assign(paste('flux',levels,sep=''),Flux$wT.tilt[,levels])
assign(paste('fluxww',levels,sep=''),Fluxww$ww.tilt[,levels])
assign(paste('fluxwu',levels,sep=''),Fluxwu$wu.tilt[,levels])
assign(paste('fluxwv',levels,sep=''),Fluxwv$wv.tilt[,levels])
}
library(R.matlab)
library(doMC)
library(foreach)
registerDoMC(cores=8)
library(zoo)
library(urca)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
floss_6sT=floss_6s$T[,2]
w=120
floss_6sT_mat<-ts2mat2(floss_6sT,5400
)
setwd('~/Desktop/TED/R')
file.sources = list.files(pattern="*.R")
sapply(file.sources,source)
system.time(floss_6sT_tests<-sapply(1:dim(floss_6sT_mat)[1],function(i){noiseTests(floss_6sT_mat[i,],120,'red',parallel=TRUE)}))
1697/60
12*130
floss_6sT_sh=lapply(1:dim(floss_6sT_tests)[2],function(i){shape_extraction1206(floss_6sT_mat[i,],floss_6sT_tests[,i],w)})
floss_6sT_a=c()
floss_6sT_b=c()
for (i in 1:dim(floss_6sT_mat)[1]){
floss_6sT_a=c(floss_6sT_a,floss_6sT_sh[[i]]$start+w/4+(i-1)*5400)
floss_6sT_b=c(floss_6sT_b,floss_6sT_sh[[i]]$end+w-1-w/4+(i-1)*5400)}
length(floss_6sT_a)
library(TED)
data(CASES99)
library(TED)
library(TED)
?data
try(data(package = "TED") )
library(TED)
library(TED)
library(TED)
setwd('~/Documents/Conferences&Presentations/Presubmission/presubmission/')
bib <- read.bib("copy.bib")
slidify('presubmission.Rmd')
bib
bib <- read.bib("copy.bib")
bib
slidify('presubmission.Rmd')
print(bib[6],'html')
bib
bib <- read.bib("copy.bib")
print(bib[6],'html')
bib <- read.bib("copy.bib")
bib
bib[6]
print(bib[6],'html')
slidify('presubmission.Rmd')
bib <- read.bib("copy.bib")
print(bib[6],'html')
bib <- read.bib("copy.bib")
print(bib[6:11],'html')
slidify('presubmission.Rmd')
library(knitcitations)
bib <- read.bib("copy.bib")
slidify('presubmission.Rmd')
slidify('presubmission.Rmd')
getwd()
library(TED)
library(TED)
library(TED)
?bfast
?ur.za
citation(package = "urza", lib.loc = NULL)
citation(package = "urca", lib.loc = NULL)
library(TED)
citation(package = "urca", lib.loc = NULL)
citation(package = "base", lib.loc = NULL)
citation(package = "ggplot2", lib.loc = NULL)
citation(package = "knitr", lib.loc = NULL)
citation(package = "zoo", lib.loc = NULL)
citation(package = "geoR", lib.loc = NULL)
citation(package = "bfast", lib.loc = NULL)
citation(package = "emma", lib.loc = NULL)
library(TED)
citation('RODBC')
citation('nbclust')
library(nbclust)
install.packages('nbclust')
library(NbClust)
citation('NbClust')
citation('NbClust')
source('~/Desktop/TED/R/cbfs_red.R')
x=c(arima.sim(list(order = c(1,0,0),ar=coeff),n=500,sd=s),
cbfs_red('rc'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('cr'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('box'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('sine'),arima.sim(list(order = c(1,0,0),ar=coeff),n=1000,sd=s),
arima.sim(list(order = c(1,0,0),ar=0.8),n=1100,sd=4))
# specify a sliding window size and significant level
w=128; alpha=0.05
# event detection
events=eventDetection(x,w,'red',parallel=TRUE,alpha,'art')
set.seed(123)
# set a red noise level
coeff=0.5;s=1
# generated x with red noise as the background; this time series is the one used in
# Kang et al. (2014)
x=c(arima.sim(list(order = c(1,0,0),ar=coeff),n=500,sd=s),
cbfs_red('rc'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('cr'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('box'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('sine'),arima.sim(list(order = c(1,0,0),ar=coeff),n=1000,sd=s),
arima.sim(list(order = c(1,0,0),ar=0.8),n=1100,sd=4))
# specify a sliding window size and significant level
w=128; alpha=0.05
# event detection
events=eventDetection(x,w,'red',parallel=TRUE,alpha,'art')
set.seed(123)
# generate a time series with red noise; this is the same with the one used
# in Kang et al. (2014)
coeff=0.5;s=1
x=c(arima.sim(list(order = c(1,0,0),ar=coeff),n=500,sd=s),
cbfs_red('rc'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('cr'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('box'),arima.sim(list(order = c(1,0,0),ar=coeff),n=400,sd=s),
cbfs_red('sine'),arima.sim(list(order = c(1,0,0),ar=coeff),n=1000,sd=s),
arima.sim(list(order = c(1,0,0),ar=0.8),n=1100,sd=4))
w=128; alpha=0.05
# event detection
events=eventDetection(x,w,'red',parallel=TRUE,alpha,'art')
# plot events without clustering
plot.events(events)
library(TED)
source('~/Desktop/TED/R/eventCluster.R')
source('~/Desktop/TED/R/eventCluster.R')
source('~/Desktop/TED/R/noiseTests.R')
plot
install.packages('~/Desktop/TED_1.0.tar.gz', repos=NULL)
library(TED)
library(TED)
build_win('TED')
install.packages('~/Desktop/TED_1.0.tar.gz', repos=NULL,source=TRUE)
install.packages('~/Desktop/TED_1.0.tar.gz', repos=NULL,type='source')
install.packages('~/Desktop/TED_1.0.tar.gz', repos=NULL)
build(TED)
release()
library(TED)
source('~/Desktop/TED/R/noiseTests.R')
?library
library(TED)
library(TED)
library(TED)
library(TED)
library(TED)
library(tcltk)
?txtProgressBar
?box.test
?Box.test
?tkProgressBar
?txtProgressBar
?tkProgressBar
library(tcltk)
?tkProgressBar
?txtProgressBar
library(TED)
library(TED)
library(TED)
source('~/Desktop/TED/R/eventCluster.R')
source('~/Desktop/TED/R/plotevents.R')
library(TED)
library(TED)
library(TED)
library(TED)
library(formatR)
?tidy.dir
tidy.dir('~/Desktop/TED/R/')
library(TED)
library(TED)
library(TED)
library(TED)
library(TED)
library(TED)
library(TED)
PP.test
?PP.test
library(TED)
library(TED)
library(TED)
library(TED)
setwd('~/Desktop/TED')
